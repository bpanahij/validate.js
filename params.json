{"name":"Validate.js","body":"### Valdate.js\r\n\r\nThis is a simple jQuery plugin I wrote to create simple front end validation. It is not meant to deal with security issues or to sanitize inputs. It is only meant to provide feedback to the user, to tell them whether their input is appropriate. The plugin functions by looking for a regular expression inside an attribute of an input tag. \r\n\r\n## Purpose\r\nTo give the user useful feedback in form fields. This plugin will not provide value sanitizing security, because it is modifiable by the client. However, it can help guid the user to know hen their input is compliant with requirements.\r\n\r\n## Functionality\r\n### Regular Expressions and Classes\r\n\r\nValidate.js uses a style class to indicate whether the field should be validated and an attribute to contain a regular expression to validate the field value against.\r\n\r\nHere is an input text field that will only allow the character \"A\":\r\n`<input class=\"validate\" validate=\"^[A]*$\">`\r\n\r\nHere is an input text field that will only allow numeric values:\r\n`<input class=\"validate\" validate=\"^[0-9]*$\">`\r\n\r\nThe class: validate, specifies that this is a field that should be validated, and the validate attribute contains a regular expression that indicates which value are valid.\r\n\r\n### Required or Not\r\n\r\nYou can also specify a value is required with the required (req) attribute:\r\n`<input class=\"validate\" validate=\"^[A]*$\" req=\"1\">`\r\n\r\n### Other Requirements\r\n\r\nValidate.js uses a field with the unique id alert `<div id=\"alert\"></div>` to place alerts and messages.\r\n\r\n## Installing\r\n\r\nTo install, you should include validate.js on the page you wish to validate. Then, it will load itself and perform validation on all inputs with the above described attributes. Voila! You are using validate.js!\r\n","tagline":"Simple form validation jQuery plugin","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}